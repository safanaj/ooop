--- a/ooop.py
+++ b/ooop.py
@@ -25,6 +25,7 @@ import time
 import base64
 import types
 from datetime import datetime, date
+import logging
 
 # check if pydot is installed
 try:
@@ -111,7 +112,7 @@ class objectsock_mock():
 class OOOP:
     """ Main class to manage xml-rpc comunitacion with openerp-server """
     def __init__(self, user='admin', pwd='admin', dbname='openerp', 
-                 uri='http://localhost', port=8069, debug=False, 
+                 uri='http://localhost', port=8069, debug=False, loglevel=logging.WARN,
                  exe=False, active=True, **kwargs):
         self.user = user       # default: 'admin'
         self.pwd = pwd         # default: 'admin'
@@ -119,6 +120,7 @@ class OOOP:
         self.uri = uri
         self.port = port
         self.debug = debug
+        self.loglevel = loglevel
         self.exe = exe
         self.active = active
         self.commonsock = None
@@ -149,55 +151,55 @@ class OOOP:
 
     def execute(self, model, *args):
         if self.debug:
-            print "DEBUG [execute]:", model, args
+            logging.log(self.loglevel, "DEBUG [execute]: %s %s", model, args)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, *args)
 
     def create(self, model, data):
         """ create a new register """
         if self.debug:
-            print "DEBUG [create]:", model, data
+            logging.log(self.loglevel, "DEBUG [create]: %s %s", model, data)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, 'create', data)
 
     def unlink(self, model, ids):
         """ remove register """
         if self.debug:
-            print "DEBUG [unlink]:", model, ids
+            logging.log(self.loglevel, "DEBUG [unlink]: %s %s", model, ids)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, 'unlink', ids)
 
     def write(self, model, ids, value):
         """ update register """
         if self.debug:
-            print "DEBUG [write]:", model, ids, value
+            logging.log(self.loglevel, "DEBUG [write]: %s %s %s", model, ids, value)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, 'write', ids, value)
 
     def read(self, model, ids, fields=[]):
         """ update register """
         if self.debug:
-            print "DEBUG [read]:", model, ids, fields
+            logging.log(self.loglevel, "DEBUG [read]: %s %s %s", model, ids, fields)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, 'read', ids, fields)
 
     def read_all(self, model, fields=[]):
         """ update register """
         if self.debug:
-            print "DEBUG [read_all]:", model, fields
+            logging.log(self.loglevel, "DEBUG [read_all]: %s %s", model, fields)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, 'read', self.all(model), fields)
 
     def search(self, model, query):
         """ return ids that match with 'query' """
         if self.debug:
-            print "DEBUG [search]:", model, query
+            logging.log(self.loglevel, "DEBUG [search]: %s %s", model, query)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, 'search', query)
         
     # TODO: verify if remove this
     def custom_execute(self, model, ids, remote_method, data):
         if self.debug:
-            print "DEBUG [custom_execute]:", self.dbname, self.uid, self.pwd, model, args
+            logging.log(self.loglevel, "DEBUG [custom_execute]: %s %s %s %s %s", self.dbname, self.uid, self.pwd, model, args)
         return self.objectsock.execute(self.dbname, self.uid, self.pwd, model, ids, remote_method, data)
 
     def all(self, model, query=[]):
         """ return all ids """
         if self.debug:
-            print "DEBUG [all]:", model, query
+            logging.log(self.loglevel,"DEBUG [all]: %s %s", model, query)
         return self.search(model, query)
 
     def insert_items(self, model, data):
@@ -208,7 +210,7 @@ class OOOP:
             if not self.search(model, query): # check if it's already present
                 self.create(model, d)
             else:
-                print 'Warning: %s already in %s model: %s' % (item, model)
+                logging.log(self.loglevel, 'Warning: %s already in %s model: %s' % (item, model))
 
     def load_models(self):
         models = self.read_all(OOOPMODELS)
@@ -336,7 +338,7 @@ class OOOP:
                 time.sleep(1)
             attempt += 1
             if attempt > 200:
-                print 'Printing aborted, too long delay!'
+                logging.log(self.loglevel,'Printing aborted, too long delay!')
                 break
         
         if report_type == 'pdf':
@@ -574,7 +576,7 @@ class Data(object):
         else:
             fields = self.fields
         for i in fields:
-            print "%s: %s" % (i, self.__getattr__(i))
+            logging.log(self._ooop.loglevel, "%s: %s" % (i, self.__getattr__(i)))
 
     def __setattr__(self, field, value):
         if 'fields' in self.__dict__:
@@ -681,8 +683,8 @@ class Data(object):
                         self.INSTANCES['%s:%s' % (relation, self.__dict__[name]._ref)] = self.__dict__[name]
 
         if self._ooop.debug:
-            print ">>> model:", self._model
-            print ">>> data:", data
+            logging.log(self._ooop.loglevel, ">>> model: %s", self._model)
+            logging.log(self._ooop.loglevel, ">>> data: %s", data)
 
         # create or write the object
         if self._ref > 0 and not self._copy: # same object
